// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Authentication Models
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String?
  firstName   String
  lastName    String
  role        UserRole
  isActive    Boolean   @default(true)
  avatar      String?
  phone       String?
  address     String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  doctorProfile  Doctor?
  patientProfile Patient?
  staffProfile   Staff?
  appointments   Appointment[]
  labOrders      LabOrder[]
  invoices       Invoice[]
  auditLogs      AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  LAB_TECHNICIAN
  PHARMACIST
  PATIENT
}

// Patient Management Models
model Patient {
  id                           String   @id @default(cuid())
  patientId                    String   @unique
  firstName                    String
  lastName                     String
  email                        String?
  phone                        String
  dateOfBirth                  DateTime
  gender                       Gender
  address                      String
  city                         String   @default("")
  state                        String   @default("")
  zipCode                      String   @default("")
  emergencyContactName         String   @default("")
  emergencyContactPhone        String   @default("")
  emergencyContactRelationship String   @default("")
  bloodGroup                   String?
  allergies                    String?
  chronicConditions            String?
  currentMedications           String?
  insuranceProvider            String?
  insurancePolicyNumber        String?
  isActive                     Boolean  @default(true)
  avatar                       String?
  notes                        String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  // Optional account link for patient portal access
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Relations
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]
  labOrders      LabOrder[]
  invoices       Invoice[]
  vitalSigns     VitalSigns[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model MedicalRecord {
  id        String   @id @default(cuid())
  patientId String
  diagnosis String
  treatment String
  notes     String?
  date      DateTime
  doctorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])

  @@map("medical_records")
}

model VitalSigns {
  id               String   @id @default(cuid())
  patientId        String
  bloodPressure    String
  heartRate        Int
  temperature      Float
  respiratoryRate  Int
  oxygenSaturation Int
  weight           Float?
  height           Float?
  recordedAt       DateTime
  recordedBy       String
  createdAt        DateTime @default(now())

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("vital_signs")
}

// Doctor and Appointment Models
model Doctor {
  id              String    @id @default(cuid())
  doctorId        String    @unique
  firstName       String
  lastName        String
  email           String    @unique
  phone           String
  specialization  String
  licenseNumber   String    @unique
  experience      Int
  qualification   String
  consultationFee Float
  dateOfBirth     DateTime?
  gender          Gender?
  address         String?
  isAvailable     Boolean   @default(true)
  isActive        Boolean   @default(true)
  avatar          String?
  workingHours    String // JSON string for working hours
  notes           String?
  // Additional fields from registration form (add as needed):
  city            String?
  state           String?
  zipCode         String?
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelationship String?
  bloodGroup      String?
  joiningDate     DateTime?
  departmentId    String? // Primary department reference
  // Remove photo/pdf fields if any (none present)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Optional account link for doctor portal access
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Relations
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]     @relation("DoctorPrescriptions")
  departments    DoctorDepartment[]
  schedules      Schedule[]
  primaryDepartment Department?     @relation("PrimaryDepartment", fields: [departmentId], references: [id])
  headOfDepartments Department[]    @relation("DepartmentHead")

  @@map("doctors")
}

// Nurse/Staff Model
model Staff {
  id            String    @id @default(cuid())
  staffId       String    @unique
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  role          StaffRole
  department    String?
  qualification String?
  dateOfBirth   DateTime?
  gender        Gender?
  address       String?
  isActive      Boolean   @default(true)
  avatar        String?
  joiningDate   DateTime  @default(now())
  salary        Float?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Optional account link for staff portal access
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@map("staff")
}

enum StaffRole {
  NURSE
  LAB_TECHNICIAN
  PHARMACIST
  RECEPTIONIST
  ADMIN_STAFF
  OTHER
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  startTime   String
  endTime     String
  type        AppointmentType
  status      AppointmentStatus @default(SCHEDULED)
  reason      String
  notes       String?
  createdById String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  patient   Patient @relation(fields: [patientId], references: [id])
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  createdBy User    @relation(fields: [createdById], references: [id])

  @@map("appointments")
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  ROUTINE_CHECKUP
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Billing Models
model Invoice {
  id          String        @id @default(cuid())
  invoiceId   String        @unique
  patientId   String
  amount      Float
  tax         Float         @default(0)
  discount    Float         @default(0)
  totalAmount Float
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  issuedDate  DateTime      @default(now())
  paidDate    DateTime?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  patient   Patient       @relation(fields: [patientId], references: [id])
  createdBy User          @relation(fields: [createdById], references: [id])
  items     BillingItem[]
  payments  Payment[]

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model BillingItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  category    String
  createdAt   DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("billing_items")
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  INSURANCE
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Laboratory Models
model LabTest {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  category    String
  price       Float
  normalRange String?
  unit        String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders  LabOrder[]
  results LabResult[]

  @@map("lab_tests")
}

model LabOrder {
  id          String         @id @default(cuid())
  orderId     String         @unique
  patientId   String
  doctorId    String
  testIds     String // JSON array of test IDs
  status      LabOrderStatus @default(PENDING)
  priority    Priority       @default(NORMAL)
  notes       String?
  orderedAt   DateTime       @default(now())
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  patient Patient     @relation(fields: [patientId], references: [id])
  doctor  User        @relation(fields: [doctorId], references: [id])
  tests   LabTest[]
  results LabResult[]

  @@map("lab_orders")
}

enum LabOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model LabResult {
  id          String   @id @default(cuid())
  orderId     String
  testId      String
  value       String
  unit        String?
  normalRange String?
  status      String // NORMAL, ABNORMAL, CRITICAL
  notes       String?
  testedAt    DateTime @default(now())
  reviewedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order LabOrder @relation(fields: [orderId], references: [id])
  test  LabTest  @relation(fields: [testId], references: [id])

  @@map("lab_results")
}

// Pharmacy Models
model Medication {
  id                String   @id @default(cuid())
  name              String
  genericName       String?
  manufacturer      String
  dosageForm        String
  strength          String
  category          String
  description       String?
  sideEffects       String?
  contraindications String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  inventory     InventoryItem[]
  prescriptions PrescriptionItem[]

  @@map("medications")
}

model InventoryItem {
  id            String   @id @default(cuid())
  medicationId  String
  batchNumber   String
  quantity      Int
  unitPrice     Float
  expiryDate    DateTime
  supplier      String
  receivedDate  DateTime
  minStockLevel Int      @default(10)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  medication Medication @relation(fields: [medicationId], references: [id])

  @@map("inventory_items")
}

model Prescription {
  id        String             @id @default(cuid())
  patientId String
  doctorId  String
  date      DateTime           @default(now())
  status    PrescriptionStatus @default(PENDING)
  notes     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  patient Patient            @relation(fields: [patientId], references: [id])
  doctor  Doctor             @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  items   PrescriptionItem[]

  @@map("prescriptions")
}

enum PrescriptionStatus {
  PENDING
  DISPENSED
  PARTIALLY_DISPENSED
  CANCELLED
}

model PrescriptionItem {
  id             String   @id @default(cuid())
  prescriptionId String
  medicationId   String
  dosage         String
  frequency      String
  duration       String
  quantity       Int
  instructions   String?
  createdAt      DateTime @default(now())

  // Relations
  prescription Prescription @relation(fields: [prescriptionId], references: [id])
  medication   Medication   @relation(fields: [medicationId], references: [id])

  @@map("prescription_items")
}

// Department and System Models
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headDoctorId String? // Reference to doctor who is HOD
  location    String?
  established String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  headDoctor Doctor?             @relation("DepartmentHead", fields: [headDoctorId], references: [id])
  doctors    DoctorDepartment[]
  primaryDoctors Doctor[]        @relation("PrimaryDepartment")

  @@map("departments")
}

model DoctorDepartment {
  id           String   @id @default(cuid())
  doctorId     String
  departmentId String
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  doctor     Doctor     @relation(fields: [doctorId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@unique([doctorId, departmentId])
  @@map("doctor_departments")
}

model Schedule {
  id               String          @id @default(cuid())
  doctorId         String
  dayOfWeek        String          // e.g., "monday", "tuesday", etc.
  startTime        String          // e.g., "09:00"
  endTime          String          // e.g., "17:00"
  maxPatients      Int             @default(20)
  consultationType String          @default("OPD") // OPD, IPD, EMERGENCY, etc.
  status           ScheduleStatus  @default(ACTIVE)
  validFrom        DateTime        @default(now())
  validTo          DateTime?       // null means always valid
  breakStartTime   String?         // e.g., "13:00"
  breakEndTime     String?         // e.g., "14:00"
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, dayOfWeek]) // One schedule per doctor per day
  @@map("schedules")
}

enum ScheduleStatus {
  ACTIVE
  INACTIVE
  TEMPORARY
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
